@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using AntDesign

@implements Davis.Core.IDavisPlugin
@implements IDisposable
@inject IJSRuntime _jsRuntime

<Space>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="@(()=>{ Context?.SendNotification("Title", "Message");})">
            SendNotification
        </Button>
    </SpaceItem>

    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="@(()=>{ Context?.SendWebMessage("Message");})">
            SendWebMessage
        </Button>
    </SpaceItem>

    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="@(async ()=>{ await _jsRuntime.InvokeVoidAsync("pluginAlert", "Hello World!");})">
            plugin js function
        </Button>
    </SpaceItem>
</Space>

<br />
<Space>
    <SpaceItem>
        <a href="/" style="display:inline-block; 
                            background-color:#212529;
                            color:#fff;
                            border:none;
                            margin-top:1rem;
                            padding:0.5rem;"
        >
            Return
        </a>
    </SpaceItem>
</Space>

@code {
    [CascadingParameter]
    public Davis.Core.IPluginContext Context { get; set; } = default!;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        await Context.LoadJs("assets/index.js");
        await Context.LoadCss("assets/index.css");
    }


    public void Dispose()
    {
        _ = Context.UnLoadJs("assets/index.js");
        _ = Context.UnLoadCss("assets/index.css");
    }
}